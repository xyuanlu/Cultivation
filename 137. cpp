/*
 * 137. Single Number II
 * Given a non-empty array of integers, every element appears three times except for one,
 * which appears exactly once. Find that single one.
 *
 * Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
 */
 
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        vector<int> m(32);
        for (int n:nums) {
            //int c = 1;
            for (int i=0; i<32; ++i) {
                //cout << "... " << (1 << i) << " " << (n & (1 << i)) << endl;
                if( (n & (1<<i)) !=0) {
                    //cout << i << " ..." << endl;
                    m[i] ++;
                }
                //c=c<<1;
            }
        }
        
        /*for(int i=0; i<32; ++i) {
            cout<<m[i]<<" ";
        }*/
        
        int res = 0;
        for(int i=0; i<32; ++i) {
            if (m[i]%3 ==1) {
                res = res | (1<<i);
            }            
        }
        
        return res;
    }
};
